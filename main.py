import customtkinter as ctk
import subprocess
import threading
import time
from datetime import datetime, timedelta
import os
import sys
import math
from PIL import Image, ImageTk
import json
from CTkMessagebox import CTkMessagebox

class AdvancedShutdownTimer(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("‚ö° Power Control Pro")
        self.geometry("800x900")
        self.resizable(True, True)
        self.minsize(700, 800)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("assets/theme.json")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.time_left = 0
        self.timer_running = False
        self.scheduled_time = None
        self.animation_running = False
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.load_images()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.create_widgets()
        self.setup_layout()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        self.animate_clock()
        
    def load_images(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists("assets"):
                os.makedirs("assets")
                
            # –ò–∫–æ–Ω–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏)
            self.icons = {
                "shutdown": self.create_icon("üîå", "#E74C3C"),
                "restart": self.create_icon("üîÑ", "#3498DB"),
                "sleep": self.create_icon("üí§", "#9B59B6"),
                "timer": self.create_icon("‚è∞", "#F39C12"),
                "schedule": self.create_icon("üìÖ", "#2ECC71"),
                "settings": self.create_icon("‚öôÔ∏è", "#95A5A6"),
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def create_icon(self, emoji, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏–∑ —ç–º–æ–¥–∑–∏"""
        from PIL import Image, ImageDraw, ImageFont
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
            d = ImageDraw.Draw(img)
            
            # –†–∏—Å—É–µ–º –∫—Ä—É–≥
            d.ellipse([0, 0, 64, 64], fill=color)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
            try:
                font = ImageFont.truetype("seguiemj.ttf", 32)
            except:
                font = ImageFont.load_default()
            
            d.text((16, 16), emoji, font=font, embedded_color=True)
            
            return ctk.CTkImage(light_image=img, dark_image=img, size=(64, 64))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏: {e}")
            return None
    
    def create_widgets(self):
        # ===== –í–ö–õ–ê–î–ö–ò =====
        self.tabview = ctk.CTkTabview(self)
        self.tab1 = self.tabview.add("‚è∞ –¢–∞–π–º–µ—Ä")
        self.tab2 = self.tabview.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        self.tab3 = self.tabview.add("‚ö° –î–µ–π—Å—Ç–≤–∏—è")
        self.tab4 = self.tabview.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.tab5 = self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # ===== –í–ö–õ–ê–î–ö–ê –¢–ê–ô–ú–ï–† =====
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç
        self.clock_frame = ctk.CTkFrame(self.tab1, height=300)
        self.clock_canvas = ctk.CTkCanvas(self.clock_frame, bg="#2B2B2B", highlightthickness=0)
        self.clock_canvas.pack(fill="both", expand=True)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.time_input_frame = ctk.CTkFrame(self.tab1)
        
        self.create_time_input(self.time_input_frame, "–ß–∞—Å—ã", 0, 23, "hours")
        self.create_time_input(self.time_input_frame, "–ú–∏–Ω—É—Ç—ã", 0, 59, "minutes")
        self.create_time_input(self.time_input_frame, "–°–µ–∫—É–Ω–¥—ã", 0, 59, "seconds")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = ctk.CTkFrame(self.tab1)
        self.start_btn = ctk.CTkButton(self.control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫", 
                                     command=self.start_timer, fg_color="#27AE60")
        self.stop_btn = ctk.CTkButton(self.control_frame, text="‚èπÔ∏è –°—Ç–æ–ø", 
                                    command=self.stop_timer, fg_color="#E74C3C", state="disabled")
        self.pause_btn = ctk.CTkButton(self.control_frame, text="‚è∏Ô∏è –ü–∞—É–∑–∞", 
                                     command=self.pause_timer, fg_color="#F39C12", state="disabled")
        
        # ===== –í–ö–õ–ê–î–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–ï =====
        self.calendar_frame = ctk.CTkFrame(self.tab2)
        
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        self.date_picker = ctk.CTkEntry(self.calendar_frame, placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
        self.time_picker = ctk.CTkEntry(self.calendar_frame, placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è")
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.presets_frame = ctk.CTkFrame(self.tab2)
        self.create_presets()
        
        # ===== –í–ö–õ–ê–î–ö–ê –î–ï–ô–°–¢–í–ò–Ø =====
        self.actions_grid = ctk.CTkFrame(self.tab3)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions = [
            ("üîå –í—ã–∫–ª—é—á–∏—Ç—å", self.shutdown_now, "#E74C3C"),
            ("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", self.restart_computer, "#3498DB"),
            ("üí§ –°–æ–Ω", self.sleep_computer, "#9B59B6"),
            ("‚ö° –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è", self.hibernate_computer, "#8E44AD"),
            ("üîí –í—ã—Ö–æ–¥", self.logoff_computer, "#F39C12"),
            ("üö´ –û—Ç–º–µ–Ω–∞", self.cancel_shutdown, "#95A5A6")
        ]
        
        for i, (text, command, color) in enumerate(actions):
            btn = ctk.CTkButton(self.actions_grid, text=text, command=command, 
                              fg_color=color, height=80, width=180,
                              font=ctk.CTkFont(size=16, weight="bold"))
            btn.grid(row=i//2, column=i%2, padx=10, pady=10)
        
        # ===== –í–ö–õ–ê–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
        self.stats_frame = ctk.CTkFrame(self.tab4)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_canvas = ctk.CTkCanvas(self.stats_frame, bg="#2B2B2B", height=300)
        self.stats_canvas.pack(fill="both", expand=True, padx=20, pady=20)
        
        # ===== –í–ö–õ–ê–î–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò =====
        self.settings_frame = ctk.CTkFrame(self.tab5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        self.theme_label = ctk.CTkLabel(self.settings_frame, text="–¢–µ–º–∞:")
        self.theme_var = ctk.StringVar(value="Dark")
        self.theme_option = ctk.CTkOptionMenu(self.settings_frame, values=["Dark", "Light", "System"],
                                            variable=self.theme_var, command=self.change_theme)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notify_var = ctk.BooleanVar(value=True)
        self.notify_check = ctk.CTkCheckBox(self.settings_frame, text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                          variable=self.notify_var)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
        self.sound_var = ctk.BooleanVar(value=True)
        self.sound_check = ctk.CTkCheckBox(self.settings_frame, text="–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫",
                                         variable=self.sound_var)
        
        # ===== –°–¢–ê–¢–£–° –ë–ê–† =====
        self.status_bar = ctk.CTkFrame(self, height=30)
        self.status_label = ctk.CTkLabel(self.status_bar, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_bar = ctk.CTkProgressBar(self.status_bar, width=200, height=10)
        
    def create_time_input(self, parent, label, min_val, max_val, var_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        frame = ctk.CTkFrame(parent)
        lbl = ctk.CTkLabel(frame, text=label)
        entry = ctk.CTkEntry(frame, width=60)
        setattr(self, f"{var_name}_entry", entry)
        
        # –ö–Ω–æ–ø–∫–∏ +/-
        btn_frame = ctk.CTkFrame(frame)
        plus_btn = ctk.CTkButton(btn_frame, text="+", width=30, 
                               command=lambda: self.adjust_time(var_name, 1, max_val))
        minus_btn = ctk.CTkButton(btn_frame, text="-", width=30,
                                command=lambda: self.adjust_time(var_name, -1, min_val))
        
        lbl.pack()
        entry.pack(pady=5)
        plus_btn.pack(side="left")
        minus_btn.pack(side="right")
        btn_frame.pack()
        frame.pack(side="left", padx=10)
        
    def create_presets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        presets = [
            ("5 –º–∏–Ω—É—Ç", 5),
            ("15 –º–∏–Ω—É—Ç", 15),
            ("30 –º–∏–Ω—É—Ç", 30),
            ("1 —á–∞—Å", 60),
            ("2 —á–∞—Å–∞", 120),
            ("4 —á–∞—Å–∞", 240)
        ]
        
        for text, minutes in presets:
            btn = ctk.CTkButton(self.presets_frame, text=text,
                              command=lambda m=minutes: self.set_preset_time(m))
            btn.pack(side="left", padx=5)
    
    def setup_layout(self):
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç–∞–π–º–µ—Ä
        self.clock_frame.pack(fill="x", padx=20, pady=20)
        self.time_input_frame.pack(pady=20)
        self.control_frame.pack(pady=20)
        self.start_btn.pack(side="left", padx=10)
        self.stop_btn.pack(side="left", padx=10)
        self.pause_btn.pack(side="left", padx=10)
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self.calendar_frame.pack(pady=20)
        self.date_picker.pack(pady=10)
        self.time_picker.pack(pady=10)
        self.presets_frame.pack(pady=20)
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self.actions_grid.pack(pady=20)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_frame.pack(pady=20)
        self.theme_label.pack(pady=10)
        self.theme_option.pack(pady=10)
        self.notify_check.pack(pady=10)
        self.sound_check.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar.pack(fill="x", side="bottom")
        self.status_label.pack(side="left", padx=10)
        self.progress_bar.pack(side="right", padx=10)
        self.progress_bar.set(0)
    
    def animate_clock(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç–∞"""
        if self.animation_running:
            self.after_cancel(self.animation_id)
        
        self.animation_running = True
        self.draw_clock()
        self.animation_id = self.after(1000, self.animate_clock)
    
    def draw_clock(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç–∞"""
        try:
            width = self.clock_canvas.winfo_width()
            height = self.clock_canvas.winfo_height()
            
            if width <= 1 or height <= 1:
                return
                
            self.clock_canvas.delete("all")
            
            # –†–∏—Å—É–µ–º —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç
            center_x, center_y = width // 2, height // 2
            radius = min(center_x, center_y) - 20
            
            # –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
            self.clock_canvas.create_oval(center_x - radius, center_y - radius,
                                        center_x + radius, center_y + radius,
                                        outline="#3498DB", width=3)
            
            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω, —Ä–∏—Å—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if self.timer_running and self.total_time > 0:
                progress = 1 - (self.time_left / self.total_time)
                angle = progress * 360
                
                # –†–∏—Å—É–µ–º –¥—É–≥—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.clock_canvas.create_arc(center_x - radius, center_y - radius,
                                           center_x + radius, center_y + radius,
                                           start=90, extent=-angle, outline="#2ECC71", width=5,
                                           style="arc")
            
            # –†–∏—Å—É–µ–º —Ü–∏—Ñ—Ä—ã
            for i in range(12):
                angle = math.radians(i * 30 - 90)
                x = center_x + (radius - 20) * math.cos(angle)
                y = center_y + (radius - 20) * math.sin(angle)
                self.clock_canvas.create_text(x, y, text=str(i if i > 0 else 12), 
                                            fill="white", font=("Arial", 12, "bold"))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            if self.timer_running:
                hours = self.time_left // 3600
                minutes = (self.time_left % 3600) // 60
                seconds = self.time_left % 60
                
                time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                self.clock_canvas.create_text(center_x, center_y, text=time_str,
                                            fill="white", font=("Arial", 24, "bold"))
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —á–∞—Å–æ–≤: {e}")
    
    def adjust_time(self, field, delta, limit):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        entry = getattr(self, f"{field}_entry")
        try:
            value = int(entry.get() or 0) + delta
            value = max(0, min(limit, value))
            entry.delete(0, "end")
            entry.insert(0, str(value))
        except ValueError:
            entry.delete(0, "end")
            entry.insert(0, "0")
    
    def set_preset_time(self, minutes):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        hours = minutes // 60
        minutes = minutes % 60
        
        self.hours_entry.delete(0, "end")
        self.hours_entry.insert(0, str(hours))
        
        self.minutes_entry.delete(0, "end")
        self.minutes_entry.insert(0, str(minutes))
        
        self.seconds_entry.delete(0, "end")
        self.seconds_entry.insert(0, "0")
    
    def start_timer(self):
        try:
            hours = int(self.hours_entry.get() or 0)
            minutes = int(self.minutes_entry.get() or 0)
            seconds = int(self.seconds_entry.get() or 0)
            
            total_seconds = hours * 3600 + minutes * 60 + seconds
            
            if total_seconds <= 0:
                self.show_message("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 0")
                return
                
            self.time_left = total_seconds
            self.total_time = total_seconds
            self.timer_running = True
            
            self.start_btn.configure(state="disabled")
            self.stop_btn.configure(state="normal")
            self.pause_btn.configure(state="normal")
            self.update_status("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω", "green")
            
            # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            self.timer_thread = threading.Thread(target=self.run_timer)
            self.timer_thread.daemon = True
            self.timer_thread.start()
            
        except ValueError:
            self.show_message("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞")
    
    def pause_timer(self):
        """–ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        if self.timer_running:
            self.timer_running = False
            self.pause_btn.configure(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")
            self.update_status("–¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ", "orange")
        else:
            self.timer_running = True
            self.pause_btn.configure(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.update_status("–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω", "green")
            
            # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            self.timer_thread = threading.Thread(target=self.run_timer)
            self.timer_thread.daemon = True
            self.timer_thread.start()
    
    def stop_timer(self):
        self.timer_running = False
        self.start_btn.configure(state="normal")
        self.stop_btn.configure(state="disabled")
        self.pause_btn.configure(state="disabled")
        self.pause_btn.configure(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
        self.update_status("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "orange")
        self.progress_bar.set(0)
    
    def run_timer(self):
        while self.time_left > 0 and self.timer_running:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
            progress = 1 - (self.time_left / self.total_time)
            self.progress_bar.set(progress)
            
            time.sleep(1)
            if self.timer_running:
                self.time_left -= 1
        
        if self.time_left <= 0 and self.timer_running:
            self.shutdown_computer()
    
    def shutdown_computer(self):
        try:
            self.update_status("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...", "red")
            subprocess.run(["shutdown", "/s", "/t", "0"])
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä: {e}")
    
    def restart_computer(self):
        try:
            self.update_status("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...", "blue")
            subprocess.run(["shutdown", "/r", "/t", "0"])
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä: {e}")
    
    def sleep_computer(self):
        try:
            self.update_status("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞...", "purple")
            subprocess.run(["rundll32.exe", "powrprof.dll,SetSuspendState", "0,1,0"])
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–æ–Ω: {e}")
    
    def hibernate_computer(self):
        try:
            self.update_status("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≥–∏–±–µ—Ä–Ω–∞—Ü–∏–∏...", "purple")
            subprocess.run(["shutdown", "/h"])
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ –≥–∏–±–µ—Ä–Ω–∞—Ü–∏—é: {e}")
    
    def logoff_computer(self):
        try:
            self.update_status("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...", "orange")
            subprocess.run(["shutdown", "/l"])
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def cancel_shutdown(self):
        try:
            subprocess.run(["shutdown", "/a"])
            self.update_status("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", "green")
            self.show_message("–£—Å–ø–µ—Ö", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    def update_status(self, message, color="white"):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_label.configure(text=message, text_color=color)
    
    def show_message(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        CTkMessagebox(title=title, message=message)
    
    def change_theme(self, choice):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        ctk.set_appearance_mode(choice)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.animation_running = False
        if self.timer_running:
            self.stop_timer()
        self.destroy()

if __name__ == "__main__":
    app = AdvancedShutdownTimer()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()